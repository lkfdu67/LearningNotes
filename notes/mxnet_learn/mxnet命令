1. 加载已有的模型
# 其中sym为符号，arg_params为参数， aux_params为辅助参数
sym, arg_params, aux_params = mx.model.load_checkpoint(prefix, epoch)
# 提取某一层的输出
all_layers = sym.get_internals()
sym = all_layers['fc1_output']
# 定义一个module
mod = mx.mod.Module(symbol=sym, context=mx.cpu(0), label_names=None)
# 绑定
mod.bind(for_training=False, data_shape=[('data',(1,3,112,112))], label_shapes=mod._label_shapes)
# 设置参数
mod.set_params(arg_params, aux_params, allow_missing=True)

2. 预测
# aligned为对齐后的输入图片，维度为C x H x W = (3,112,112)
# 增加维度, (c, h, w) --> (1, c ,h, w)
input_blob = np.expand_dims(aligned, axis=0)
# 转换成NDArray的格式
data = mx.nd.array(input_blob)
# 转换成mxnet data
mxdata = mx.io.DataBatch(data=(data,))
# 前向预测
mod.forward(mxdata, is_train=False)
output = mod.get_outputs()[0].asnumpy()

3. 保存参数成mat文件
from scipy import io

for layername in arg_params.keys():
    # print layername
    filename = '../params/arg_params/arg_' + layername + '.mat'
    varname = 'arg_' + layername
    io.savemat(filename, {varname: arg_params[layername].asnumpy()})

for layername in aux_params.keys():
    # print layername
    filename = '../params/aux_params/aux_' + layername + '.mat'
    varname = 'aux_' + layername
    io.savemat(filename, {varname: aux_params[layername].asnumpy()})

4. 保存中间结果
# 获取中间层的名字
netnames = all_layers.list_outputs()
# 初始化为第一层输出
group = mx.symbol.Group([all_layers['id_output']])
netoutputnames = ['id_output']
# 产生中间层的group和中间输出层的名字
for idx, netname in enumerate(netnames):
    if (netname[-6:]=='output') & (idx>1):
        netoutputnames.append(netname)
	group = mx.symbol.Group([group, all_layers[netname]])

# 定义模型，前向预测
mod = mx.mod.Module(symbol=group, context=mx.cpu(0), label_names=None)
mod.bind(for_training=False, data_shape=[('data',(1,3,112,112))], label_shapes=mod._label_shapes)
mod.set_params(arg_params, aux_params, allow_missing=True)
...
outputs = mod.get_outputs()

# 保存成mat文件
for idx, output in enumerate(outputs):
    filename = '../outputs/' + netoutputnames[idx] + '.mat'
    # varname首字母不能为'_'，所以要判断一下
    if netoutputnames[idx][0]=='_':
        varname = netoutputnames[idx][1:]
    else:
        varname = netoutputnames[idx]
    # varname = netoutputnames[idx]
    io.savemat(filename, {varname: output.asnumpy()})
print 'done'
















